name: User Microservice

on:
  push:
    branches: [ "main" ]

jobs:

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Unit Tests      
        run: npm install && npm run test:unit:cov
      - uses: actions/upload-artifact@v4
        with:
          name: lcov.info
          path: coverage/lcov.info
          
  code-analisys:   
    needs: unit-test  
    name: Code Analisys with SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v3
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: lcov.info
      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: ./
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.javascript.lcov.reportPaths=./lcov.info        
            -Dsonar.exclusions=**/*-spec.ts,src/main.ts,src/app.module.ts,src/db/*,src/db/migrations/*,src/user/user.module.ts,src/config/*,src/health/*,src/user/constants.ts,src/user/delete-test-mass.controller.ts,src/user/user.entity.ts,src/user/user.guard.ts,src/user/user.service.ts,Dockerfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  database-migrations:
    needs: code-analisys
    name: Run Database Migrations
    runs-on: ubuntu-latest
    steps: 
    - name: Check out code
      uses: actions/checkout@v3
    - name: Run Migrations
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: ${{ secrets.DB_PASS }}
        DB_NAME: usermicroservicedb
      shell: bash
      run: |
        npm install
        npm run typeorm:migration:run
      continue-on-error: true

  setup-kubernetes:
    needs: database-migrations  
    name: Setup Kubernetes and Docker Push
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: 'false'
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      id: install-kubectl
    - name: Update KubeConfig
      shell: bash
      run: |
        aws eks update-kubeconfig --name user-microservice-cluster --region=${{ secrets.AWS_REGION }}
    - name: Deploy API
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |        
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/user-microservice-container:latest        
        export DB_HOST=${{ secrets.DB_HOST }}
        export DB_PASS=${{ secrets.DB_PASS }}
        cd ./kubernetes/metrics-server
        kubectl apply -f components.yaml
        cd ../
        envsubst < secrets.yaml | kubectl apply -f -
        envsubst < deployment.yaml | kubectl apply -f -
        kubectl apply -f hpa.yaml
        kubectl apply -f svc.yaml
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: user-microservice-container
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kubectl rollout restart deployment user-microservice-deployment
  
  wait-3-minutes:
    needs: setup-kubernetes
    runs-on: ubuntu-latest
    steps:
    - name: Sleep for 3 minutes
      uses: jakejarvis/wait-action@master
      with:
        time: '180s'

  e2e-test:
    needs: wait-3-minutes
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: 'false'
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      id: install-kubectl
    - name: Update KubeConfig
      shell: bash
      run: |
        aws eks update-kubeconfig --name user-microservice-cluster --region=${{ secrets.AWS_REGION }}
    - name: E2E Tests     
      run: |
        export USER_MICROSERVICE_URL="http://$(kubectl get svc user-microservice-svc -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        npm install
        npm run test:e2e
      
